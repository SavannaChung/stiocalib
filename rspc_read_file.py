# rspc_read_file
import pandas as pd
import easygui as eg
import os

# Read the excel file in dataframe
def read_data_meas_ctno(filename, sheet_name, insert_name):
    """ read the meas ct no.
    -------------------------------input-------------------------------------
    filename (string) = excel file names
    sheet_name :  sheet name
    insert_name : a string telling which excel sheet is read
    -------------------------------output-------------------------------------
    meas_ctno: {insert: meas HU, ...}
    """
    df = pd.read_excel(filename, sheet_name = sheet_name)
    df1 = df[["insert_phantom","insert","hu_mean"]]

    df_g = df1[df.insert_phantom == insert_name].groupby(["insert"]).mean()
    dict_g = df_g["hu_mean"].to_dict()

    # dict_sch = {k: v+1000 for (k,v) in dict_g.items()}
    dict_sch = {k: v for (k,v) in dict_g.items()}

    return dict_sch

def read_data_mat_comp(filename, sheet_name):
    """ filename (string) = excel file names
        sheet_name = a string
    retrun:two dictionaries
        density = dict
        mat_comp = dict

    """
    df = pd.read_excel(filename, sheet_name = sheet_name)

    df.dropna(inplace = True)
    # output density of different materials as a dictionary
    density = pd.Series(df.density.values, index = df.inserts).to_dict()

    # output material composition as a dictionary
    df = df.set_index("inserts")

    mat_comp = {}
    ls_el = df.columns.tolist()[3:]

    for mat in df.index.tolist():
        mat_comp[mat] = df.loc[mat][ls_el].to_dict()

    # print(f"density: {density} \n\n comp:{mat_comp}")

    return density, mat_comp

def read_mprsp(filename, sheet_name):
    """ read the meas prsp of different materials
    -------------------------------input-------------------------------------
    filename : a string
    sheet_name : a string
    -------------------------------output-------------------------------------
    mprsp : {insert: meas prsp, ... }
    """
    df = pd.read_excel(filename, sheet_name = sheet_name)
    df.dropna(inplace = True)

    mprsp = pd.Series(df.prsp.values, index = df.inserts).to_dict()
    return mprsp

# read the mean_mea_hu and std_mea_hu from the 'siemens_mean_std.xlsx'
def read_siemens_hu_data():
    """ read the mean_mea_hu and std_mea_hu from the 'siemens_mean_std.xlsx'.
    'siemens_mean_std.xlsx' is generated by the 'ct_no_validation.ipynb'.
    This function first asks you to choose the excel file and choose the sheet you want to analysis.
    -------------------------------input-------------------------------------
    filename = a string of an excel file
    sheet_name = a string
    -------------------------------output-------------------------------------
    mean_mea_hu = {tissue: mean hu}
    std_mea_hu = {tissue: std}
    sheet_names(str) = human structure
    """
    excel_file_path = eg.fileopenbox("Please select the excel file containing the measured HU data of different icrp tissues.")
    path, file = os.path.split(excel_file_path)

    os.chdir(path)

    print(f"path :{path}")
    print(f"current directory: {os.getcwd()}")
    print(f"file: {file}")

    # get the list of sheet_names in the excel file
    excel_object = pd.ExcelFile(excel_file_path)
    sheet_names = excel_object.sheet_names

    # choose the sheet_name for the analysis
    msg = "Choose the sheet interested."
    title = "".join(["A list of sheets from ", file])
    sheet_name = eg.choicebox(msg, title, sheet_names)
    print(f"sheet_name: {sheet_name}")

    # read the excel file
    df = pd.read_excel(file, sheet_name = sheet_name, index_col = 0, header = 0)
    print(f"df: {df}")
    dict = df.to_dict('index')
    print(f"dict : {dict}")

    items = [key for key in dict.keys()]

    print(f"items: {items}")

    return dict[items[0]], dict[items[1]], sheet_name


def read_siemens_hu_histogram():
    """ to read the histogram from the mea_hu_histogram.xlsx
    -------------------------------input-------------------------------------

    -------------------------------output-------------------------------------
    two lists
    hist_hu :  the hu for the mea_hu_histogram
    percent_cnt: the percentage count
    """
    current_path = os.getcwd()
    excel_file_path = eg.fileopenbox("Please select the excel file containing the HU histograms.")
    path_to_file, excel_file = os.path.split(excel_file_path)

    # get the list of sheet_names in the excel file
    excel_object = pd.ExcelFile(excel_file_path)
    sheet_names = excel_object.sheet_names

    # choose the sheet_name for the analysis
    msg = "Choose the sheet interested."
    title = "".join(["A list of sheets from ", excel_file])
    sheet_name = eg.choicebox(msg, title, sheet_names)

    # read the excel file
    df = pd.read_excel(excel_file, sheet_name = sheet_name)

    print(f"df :{df}")



    return
